@page "/inventory"
@using SmartMass.Controller.Client.Components
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Inventory</PageTitle>
<MudGrid Class="pa-4">
    <MudItem xs="12">
        <MudText Class="ms-2" Typo="Typo.h3">Inventory</MudText>
    </MudItem>
    <MudItem xs="12" Class="d-inline-flex justify-end">
        <MudButton @onclick="AddMaterial" Variant="Variant.Outlined" Color="Color.Primary">Add new Material</MudButton>
        <MudButton @onclick="AddManufacturer" Variant="Variant.Outlined" Color="Color.Primary">Add new Manufacturer</MudButton>
        <MudButton @onclick="AddSpool" Variant="Variant.Filled" Color="Color.Primary">Add new Spool</MudButton>
    </MudItem>
    <MudItem xs="12" Class="d-flex align-content-center justify-center flex-wrap">
        @if (!hasLoaded || spools.Count == 0)
        {
            <MudCard Class="ma-2" Style="position:relative;">
                <MudCardContent>
                    <MudSkeleton Width="30%" Height="42px;" />
                    <MudSkeleton Width="80%" Height="85px;" />
                </MudCardContent>
                <MudCardActions>
                    <MudSkeleton Width="65px" Height="40px" Class="ml-2" />
                    <MudSkeleton Width="65px" Height="40px" Class="ml-3" />
                </MudCardActions>
            </MudCard>
        }
        else
        {
            @foreach (var spool in spools)
            {
                <MudCard Class="ma-2" Outlined="true" Style="position:relative;">
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1">@spool.Name</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@((e) => WriteTag(spool.Id))">Write Tag</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="@((e) => EditSpool(spool.Id))">Edit</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        }
    </MudItem>
</MudGrid>

@code {
   [Inject] HttpClient HttpClient { get; set; }
    private bool hasLoaded = false;
    private List<Spool> spools = new List<Spool>();
    private List<Device> devices = new List<Device>();
    private List<Manufacturer> manufacturers = new List<Manufacturer>();
    private List<Material> materials = new List<Material>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (await LoadSpools())
        {
            await LoadDevices();
            await LoadManufacturers();
            await LoadMaterials();
        }
        hasLoaded = true;
        StateHasChanged();
    }

    //TODO: base class that handles loading of data 
    // something, something @inherits BasePage 
    // that, and moving to code-behind gets rid of this entire muddy mess that is razor pages.

    private async Task<bool> LoadSpools()
    {
        var response = await HttpClient.GetAsync("api/Inventory");
        if (response.IsSuccessStatusCode)
        {
            var s = await response.Content.ReadFromJsonAsync<IEnumerable<Spool>>();
            if (s != null)
            {
                spools.Clear();
                spools.AddRange(s);
                return true;
            }
        }
        return false;
    }

    private async Task<bool> LoadDevices()
    {
        var response = await HttpClient.GetAsync("api/Devices");
        if (response.IsSuccessStatusCode)
        {
            var d = await response.Content.ReadFromJsonAsync<IEnumerable<Device>>();
            if (d != null)
            {
                devices.Clear();
                devices.AddRange(d);
                return true;
            }
        }
        return false;
    }

    protected async Task LoadManufacturers()
    {
        var response = await HttpClient.GetAsync($"api/Manufacturers");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<IEnumerable<Manufacturer>>();
            if (result != null)
            {
                manufacturers.Clear();
                manufacturers.AddRange(result);
                StateHasChanged();
            }
        }
    }

    private async Task LoadMaterials()
    {
        var response = await HttpClient.GetAsync($"api/Materials");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<IEnumerable<Material>>();
            if (result != null)
            {
                materials.Clear();
                materials.AddRange(result);
                StateHasChanged();
            }
        }
    }

    private async Task AddSpool()
    {
        var parameters = new DialogParameters<SpoolEdit>
        {
            { p => p.SpoolId, Guid.Empty },
            { p => p.IsNew, true }
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, ClassBackground = "dialog-blurred-bg" };
        var dialog = await DialogService.ShowAsync<Components.SpoolEdit>("Add new spool", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task AddMaterial()
    {
        var parameters = new DialogParameters<MaterialEdit>
        {
            //{ p => p.MaterialId, -1 },
            { p => p.IsNew, true }
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, ClassBackground = "dialog-blurred-bg" };
        var dialog = await DialogService.ShowAsync<Components.MaterialEdit>("Add new material", parameters, options);
        var result = await dialog.Result;
    }

    private async Task AddManufacturer()
    {
        var parameters = new DialogParameters<ManufacturerEdit>
        {
            { p => p.IsNew, true }
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Small, ClassBackground = "dialog-blurred-bg" };
        var dialog = await DialogService.ShowAsync<Components.ManufacturerEdit>("Add new manufacturer", parameters, options);
        var result = await dialog.Result;
    }

    private async Task WriteTag(Guid spoolId)
    {
        var response = await HttpClient.PostAsync($"api/Inventory/write-tag/{spoolId}", null);
    }

    private async Task EditSpool(Guid spoolId)
    {
        var parameters = new DialogParameters<SpoolEdit>
        {
            { p => p.SpoolId, spoolId },
            { p => p.IsNew, false }
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, ClassBackground = "dialog-blurred-bg" };
        var dialog = await DialogService.ShowAsync<Components.SpoolEdit>("Edit spool", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }



}
