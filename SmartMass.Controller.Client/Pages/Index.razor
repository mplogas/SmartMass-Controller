@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>SignalR test</PageTitle>


<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/messages"))
            .Build();

        hubConnection.On<string, int>("Status", (deviceId, value) =>
        {
            var encodedMsg = $"status - {deviceId}: {value}g";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, int, Guid>("KnownStatus", (deviceId, value, spoolId) =>
        {
            var encodedMsg = $"status - {deviceId}: {value}g ({spoolId})";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, string>("Heartbeat", (deviceId, status) =>
        {
            var encodedMsg = $"heartbeat - {deviceId}: {status}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, int>("Response", (deviceId, result) =>
        {
            var encodedMsg = $"Response - {deviceId}: {result}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}