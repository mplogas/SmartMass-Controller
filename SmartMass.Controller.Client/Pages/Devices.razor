@page "/devices"
@using Microsoft.AspNetCore.SignalR.Client
@using SmartMass.Controller.Client.Components
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject IDialogService DialogService

<PageTitle>Devices</PageTitle>
<MudGrid Class="pa-4">
    <MudItem xs="12">
        <MudText Class="ms-2" Typo="Typo.h3">Devices</MudText>
    </MudItem>
    <MudItem xs="12" Class="d-inline-flex justify-end">
        <MudButton @onclick="AddDevice" Variant="Variant.Filled" Color="Color.Primary">Add new Device</MudButton>
    </MudItem>
    <MudItem xs="12" Class="d-flex align-content-center justify-center flex-wrap">
        @if (!hasLoaded || devices.Count == 0)
        {
            <MudCard Class="ma-2" Style="position:relative;">
                <MudCardContent>
                    <MudSkeleton Width="30%" Height="42px;" />
                    <MudSkeleton Width="80%" Height="85px;" />
                </MudCardContent>
                <MudCardActions>
                    <MudSkeleton Width="65px" Height="40px" Class="ml-2" />
                    <MudSkeleton Width="65px" Height="40px" Class="ml-3" />
                </MudCardActions>
            </MudCard>
        }
        else
        {
            @foreach (var device in devices)
            {
                <MudCard Class="ma-2" Outlined="true" Style="position:relative;">
                    <MudCardContent>
                        <MudGrid>
                            <MudItem xs="10">
                                <MudText Typo="Typo.subtitle1">@device.Name</MudText>
                            </MudItem>
                            <MudItem xs="2">
                                <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                            </MudItem>
                            <MudItem xs="12" Class="d-inline-flex justify-end">
                                @if (status.TryGetValue(device.ClientId, out var value))
                                {
                                    @* <MudText Typo="Typo.body2" Class="mr-4">( Sunlu PLA Red )</MudText> *@
                                    <MudText Typo="Typo.h4">@value</MudText>
                                }
                                else
                                {
                                    <MudText Typo="Typo.h4">0</MudText>
                                }
                                <MudText Typo="Typo.h4">&nbsp;g</MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="@((e) => TareDevice(device.ClientId))">Tare</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="@((e) => EditDevice(device.ClientId))">Edit</MudButton>
                    </MudCardActions>
                </MudCard>
            }
        }
    </MudItem>
</MudGrid>


<style>
    .dialog-blurred-bg {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    [Inject] HttpClient HttpClient { get; set; }
    private HubConnection? hubConnection;
    private bool hasLoaded = false;
    private List<Device> devices = new List<Device>();
    private readonly Dictionary<string, int> status = new Dictionary<string, int>();
    private readonly Dictionary<string, DateTime> lastSeen = new Dictionary<string, DateTime>();


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/messages"))
            .Build();

        hubConnection.On<string, int>("Status", (deviceId, value) =>
        {
            status[deviceId] = value;
            StateHasChanged();
        });

        hubConnection.On<string, int, Guid>("KnownStatus", (deviceId, value, spoolId) =>
        {
            status[deviceId] = value;
            StateHasChanged();
        });

        hubConnection.On<string, string>("Heartbeat", (deviceId, state) =>
        {
            lastSeen[deviceId] = DateTime.UtcNow;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await LoadData();
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task AddDevice()
    {
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, ClassBackground = "dialog-blurred-bg" };
        var dialog = await DialogService.ShowAsync<Components.DevicesDiscovered>("Add new device", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task EditDevice(string deviceId)
    {
        var parameters = new DialogParameters<DeviceEdit>
        {
            { p => p.DeviceId, deviceId },
            { p => p.IsNew, false }
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true, ClassBackground = "dialog-blurred-bg" };
        var dialog = await DialogService.ShowAsync<DeviceEdit>("Configure device", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        var response = await HttpClient.GetAsync("api/Devices");
        var result = await response.Content.ReadFromJsonAsync<IEnumerable<Device>>();
        if (result != null)
        {
            devices.Clear();
            devices.AddRange(result);
        }
        hasLoaded = true;
        StateHasChanged();
    }

    private async Task TareDevice(string deviceId)
    {
        var response = await HttpClient.PostAsync($"api/Devices/tare/{deviceId}", null);
    }
}
