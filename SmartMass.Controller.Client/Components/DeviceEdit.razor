@using SmartMass.Controller.Shared.Models
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudGrid >
            @if (loading)
            {
                <MudItem xs="12">
                    <MudProgressCircular Class="ms-n1" Size="Size.Large" Indeterminate="true"/>
                    <MudText Class="ms-2" Typo="Typo.body1">Processing</MudText>
                </MudItem>
            }
            else
            {
                <MudItem xs="6">
                    <MudPaper Class="d-flex align-start pa-2 mx-2 my-2">
                        <MudGrid>
                            <MudItem xs="11" Class="d-flex align-center justify-center">
                                <MudText Typo="Typo.h3">@device.Name</MudText>
                            </MudItem>
                            <MudItem xs="1" Class="d-flex align-start">
                                <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
                <MudItem xs="6">
                    <MudPaper Class="d-flex align-end justify-end pa-2 mx-2 my-2">
                        <MudButton Disabled="@IsNew" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" Class="ml-4">Send Config</MudButton>
                        <MudButton Disabled="@IsNew" Size="Size.Medium" Variant="Variant.Filled" Color="Color.Primary" Class="ml-4">Calibration</MudButton>
                    </MudPaper>
                </MudItem>
            }
            
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public string DeviceId { get; set; } = string.Empty;
    [Parameter] public bool IsNew { get; set; }
    [Inject] HttpClient HttpClient { get; set; }

    private Device device = new Device();
    private bool loading = false;

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.CancelAll();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!IsNew)
        {
            if (!string.IsNullOrWhiteSpace(DeviceId)) await LoadDeviceData(DeviceId);
        }
        else device.Name = DeviceId;
    }


    private async Task LoadDeviceData(string deviceId)
    {
        loading = true;
        var response = await HttpClient.GetAsync($"api/Devices/deviceid/{deviceId}");
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<Device>();
            if (result != null)
            {
                device = result;
                StateHasChanged();
            }
        } // TODO: ...something, something error message

        loading = false;
    }

    private async Task<bool> SaveDeviceData()
    {
        loading = true;
        var response = await HttpClient.PostAsJsonAsync($"api/Devices", device);
        var result = response.IsSuccessStatusCode;
        loading = false;
        return result;
    }
}